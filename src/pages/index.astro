---
import { getCollection } from 'astro:content';

const pcParts = await getCollection('pc_parts');
---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<title>Card Game</title>
		<style>
			* {
				margin: 0;
				padding: 0;
				box-sizing: border-box;
			}
			
			body {
				font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
				line-height: 1.6;
				background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
				min-height: 100vh;
			}
			
			.masthead {
				text-align: center;
				padding: 4rem 2rem;
				color: white;
			}
			
			.masthead h1 {
				font-size: 3rem;
				margin-bottom: 1rem;
				font-weight: 700;
			}
			
			.masthead p {
				font-size: 1.2rem;
				opacity: 0.9;
			}
			
			.game-container {
				max-width: 800px;
				margin: 0 auto;
				padding: 2rem;
				background: rgba(255, 255, 255, 0.95);
				border-radius: 20px;
				box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
				margin-top: -2rem;
			}
			
			.cards-grid {
				display: grid;
				grid-template-columns: repeat(3, 1fr);
				gap: 1rem;
				margin-bottom: 2rem;
			}
			
			@media (min-width: 768px) {
				.cards-grid {
					grid-template-columns: repeat(4, 1fr);
				}
			}
			
			@media (max-width: 480px) {
				.cards-grid {
					grid-template-columns: repeat(2, 1fr);
					gap: 0.5rem;
				}
			}
			
			.card {
				aspect-ratio: 3/4;
				background: #4a5568;
				border-radius: 12px;
				cursor: pointer;
				transition: all 0.3s ease;
				display: flex;
				flex-direction: column;
				align-items: center;
				justify-content: center;
				color: white;
				font-size: 1.2rem;
				font-weight: bold;
				padding: 0.75rem;
				text-align: center;
				overflow: hidden;
				position: relative;
				min-height: 0;
				max-width: 100%;
			}
			
			.card:hover {
				transform: translateY(-4px);
				box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
			}
			
			.card.revealed {
				background: #48bb78;
			}
			
			.card-title {
				font-weight: bold;
				font-size: clamp(0.7rem, 2.5vw, 0.9rem);
				margin-bottom: 0.25rem;
				word-wrap: break-word;
				hyphens: auto;
				overflow-wrap: break-word;
			}
			
			.card-description {
				font-style: italic;
				font-size: clamp(0.6rem, 2vw, 0.75rem);
				opacity: 0.9;
				line-height: 1.2;
				word-wrap: break-word;
				hyphens: auto;
				overflow-wrap: break-word;
				display: -webkit-box;
				-webkit-line-clamp: 4;
				-webkit-box-orient: vertical;
				overflow: hidden;
			}
			
			@media (max-width: 480px) {
				.card-title {
					font-size: 0.65rem;
					margin-bottom: 0.2rem;
				}
				
				.card-description {
					font-size: 0.55rem;
					-webkit-line-clamp: 3;
				}
			}
			
			.input-section {
				text-align: center;
			}
			
			.input-group {
				display: flex;
				gap: 0.5rem;
				justify-content: center;
				align-items: center;
				flex-wrap: wrap;
			}
			
			.input-section input {
				padding: 1rem;
				font-size: 1.1rem;
				border: 2px solid #e2e8f0;
				border-radius: 8px;
				width: 100%;
				max-width: 300px;
				flex: 1;
				min-width: 200px;
			}
			
			.input-section input:focus {
				outline: none;
				border-color: #667eea;
				box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
			}
			
			.submit-btn {
				padding: 1rem 1.5rem;
				font-size: 1.1rem;
				background: #667eea;
				color: white;
				border: none;
				border-radius: 8px;
				cursor: pointer;
				font-weight: 600;
				transition: all 0.3s ease;
				white-space: nowrap;
			}
			
			.submit-btn:hover {
				background: #5a67d8;
				transform: translateY(-2px);
				box-shadow: 0 4px 12px rgba(102, 126, 234, 0.3);
			}
			
			.submit-btn:active {
				transform: translateY(0);
			}
			
			@media (max-width: 480px) {
				.input-group {
					flex-direction: column;
					align-items: stretch;
				}
				
				.input-section input {
					max-width: none;
					margin-bottom: 0.5rem;
				}
				
				.submit-btn {
					width: 100%;
				}
			}
		</style>
	</head>
	<body>
		<header class="masthead">
			<h1>Welcome to PC parts guessing Card Game</h1>
			<p>Reveal the hidden cards by entering your guess below</p>
		</header>
		
		<main class="game-container">
			<div class="cards-grid" id="cardsGrid">
				{pcParts.slice(0, 6).map((part, index) => (
					<div class="card" data-title={part.data.title} data-description={part.data.description} data-slug={part.slug} data-index={index}>
						?
					</div>
				))}
			</div>
			
			<div class="input-section">
				<div class="input-group">
					<input 
						type="text" 
						id="gameInput" 
						placeholder="Enter PC part name..."
					/>
					<button class="submit-btn" id="submitBtn">Submit</button>
				</div>
			</div>
		</main>
		
		<script>
			const cards = document.querySelectorAll('.card');
			const gameInput = document.getElementById('gameInput');
			const submitBtn = document.getElementById('submitBtn');
			
			function revealCard(card) {
				if (!card.classList.contains('revealed')) {
					card.classList.add('revealed');
					card.innerHTML = `
						<div class="card-title">${card.dataset.title}</div>
						<div class="card-description">${card.dataset.description}</div>
					`;
				}
			}
			
			function handleSubmit() {
				const inputValue = gameInput.value.trim().toLowerCase();
				
				if (!inputValue) return;
				
				cards.forEach(card => {
					const cardSlug = card.dataset.slug.toLowerCase();
					
					if (inputValue === cardSlug) {
						revealCard(card);
						gameInput.value = '';
					}
				});
			}
			
			cards.forEach(card => {
				card.addEventListener('click', () => {
					revealCard(card);
				});
			});
			
			submitBtn.addEventListener('click', handleSubmit);
			
			gameInput.addEventListener('keypress', (e) => {
				if (e.key === 'Enter') {
					handleSubmit();
				}
			});
		</script>
	</body>
</html>
